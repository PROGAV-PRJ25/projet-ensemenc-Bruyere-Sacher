public class Magasin
{
    public List<Semis> SemisDisponible { get; set; }
    public List<Outils> OutilsDisponible { get; set; }
    public int PrixTerrain { get; set; }
    public int PrixParcelle { get; set; }
    private Joueur Joueur;

    public Magasin(Joueur joueur, int prixTerrain = 100, int prixParcelle = 25)
    {
        PrixTerrain = prixTerrain;
        PrixParcelle = prixParcelle;
        Joueur = joueur;

        // Liste  des semis vendus dans le magasin
        SemisDisponible = new List<Semis>
        {
            new Semis("Tomate", 3, true),
            new Semis("Piment", 4, true),
            new Semis("Nopale", 6, false),
            new Semis("Agave", 7, false),
            new Semis("Pasteque", 5, false),
            new Semis("Fleur de Tithonia", 6, false),
            new Semis("Haricot", 2, true),
            new Semis("Avocat", 8, true),
            new Semis("Papaye", 7, true),
            new Semis("Igname", 4, true)
        };

        // Liste  des objets vendus dans le magasin
        OutilsDisponible = new List<Outils>
        {
            new Outils("B√¢che‚Äã", 10),
            new Outils("Serre", 25),
            new Outils("Epouventail‚Äã", 8),
            new Outils("Cl√¥ture", 15)
        };
    }

    //// Affiche le menu principal du magasin et traite les choix du joueur
    public void Menu()
    {
        int choix;
        do
        {
            Console.WriteLine("\nüõí Bienvenue au Magasin !");
            Console.WriteLine("1. Acheter un semis");
            Console.WriteLine("2. Acheter un outil");
            Console.WriteLine("3. Acheter un terrain");
            Console.WriteLine("4. Acheter une parcelle");
            Console.WriteLine("5. Quitter le magasin");
            Console.Write("Ton choix : ");

            if (!int.TryParse(Console.ReadLine(), out choix)) choix = 0;

            // Ex√©cution de l'action choisie
            switch (choix)
            {
                case 1:
                    AcheterSemis();
                    break;
                case 2:
                    AcheterOutils();
                    break;
                case 3:
                    AcheterTerrain(PrixTerrain);
                    break;
                case 4:
                    ChoisirEtAcheterParcelle();
                    break;
                case 5:
                    Console.WriteLine("üëã √Ä bient√¥t !");
                    break;
                default:
                    Console.WriteLine("‚ùå Choix invalide.");
                    break;
            }
        } while (choix != 5);
        Console.WriteLine();
    }
    
    // Permet au joueur d'acheter un terrain en fonction d‚Äôun type de terrain choisi
    public void AcheterTerrain(int prixTerrain)
    {
        Console.WriteLine("\nQuel type de terrain veux-tu acheter ?");
        Console.WriteLine("0. Annuler");
        Console.WriteLine("1. D√©sertique");
        Console.WriteLine("2. Tropical");
        Console.WriteLine("3. Volcanique");
        Console.Write("Entre le num√©ro du terrain : ");

        if (!int.TryParse(Console.ReadLine(), out int choix))
        {
            Console.WriteLine("‚ùå Entr√©e invalide.");
            return;
        }

        if (choix == 0)
        {
            Console.WriteLine("‚úÖ Achat annul√©.");
            return;
        }

        Terrain terrain;
        // Cr√©ation du type de terrain selon le choix
        switch (choix)
        {
            case 1:
                terrain = new TerrainDesertique();
                break;
            case 2:
                terrain = new TerrainTropical();
                break;
            case 3:
                terrain = new TerrainVolcanique();
                break;
            default:
                Console.WriteLine("‚ùå Num√©ro invalide.");
                return;
        }

        // V√©rifie si le joueur a assez d'argent
        if (Joueur.Argent >= prixTerrain)
        {
            Joueur.Argent -= prixTerrain;
            Joueur.Terrains.Add(terrain);
            Console.WriteLine($"‚úÖ Terrain {terrain.Type} achet√© !");
        }
        else
        {
            Console.WriteLine("‚ùå Fonds insuffisants !");
        }
    }

    // Permet au joueur de s√©lectionner un terrain pour y ajouter une nouvelle parcelle
    public void ChoisirEtAcheterParcelle()
    {
        if (Joueur.Terrains.Count == 0)
        {
            Console.WriteLine("‚ùó Tu n'as pas encore de terrain. Ach√®te-en un d'abord.");
            return;
        }

        Console.WriteLine("\nSur quel terrain veux-tu ajouter une parcelle ?");
        Console.WriteLine("0. Annuler");

        for (int i = 0; i < Joueur.Terrains.Count; i++)
        {
            Console.WriteLine($"{i + 1}. Terrain {Joueur.Terrains[i].Type}");
        }

        Console.Write("Entre le num√©ro du terrain : ");
        if (!int.TryParse(Console.ReadLine(), out int index))
        {
            Console.WriteLine("‚ùå Entr√©e invalide.");
            return;
        }

        if (index == 0)
        {
            Console.WriteLine("‚úÖ Action annul√©e.");
            return;
        }

        if (index < 1 || index > Joueur.Terrains.Count)
        {
            Console.WriteLine("‚ùå Choix invalide.");
            return;
        }

        Terrain terrainChoisi = Joueur.Terrains[index - 1];
        AcheterParcelle(terrainChoisi, PrixParcelle);
    }


    // Ajoute une parcelle √† un terrain donn√© si le joueur a assez d'argent
    public void AcheterParcelle(Terrain terrain, int prixParcelle)
    {
        if (Joueur.Argent >= prixParcelle)
        {
            Joueur.Argent -= prixParcelle;
            terrain.AjouterParcelle();
            Console.WriteLine("‚úÖ Parcelle ajout√©e !");
        }
        else
        {
            Console.WriteLine("‚ùå Pas assez d'argent !");
        }
    }

    // Permet au joueur d‚Äôacheter des semis
    public void AcheterSemis()
    {
        Console.WriteLine("\nQuels semis veux-tu acheter ?");
        Console.WriteLine("0. Annuler");

        for (int i = 0; i < SemisDisponible.Count; i++)
        {
            var semis = SemisDisponible[i];
            Console.WriteLine($"{i + 1}. {semis.NomPlante} ({semis.PrixAchat} pi√®ces)");
        }

        Console.Write("Entre le num√©ro du semis : ");
        if (!int.TryParse(Console.ReadLine(), out int index))
        {
            Console.WriteLine("‚ùå Entr√©e invalide.");
            return;
        }

        if (index == 0)
        {
            Console.WriteLine("‚úÖ Achat annul√©.");
            return;
        }

        if (index < 1 || index > SemisDisponible.Count)
        {
            Console.WriteLine("‚ùå Num√©ro invalide.");
            return;
        }

        var semisChoisi = SemisDisponible[index - 1];

        if (Joueur.Argent < semisChoisi.PrixAchat)
        {
            Console.WriteLine("‚ùå Tu n'as pas assez d'argent.");
            return;
        }

        Joueur.Argent -= semisChoisi.PrixAchat;

        // Ajoute le semis au stock du joueur ou augmente la quantit√© si d√©j√† pr√©sent
        bool trouve = false;
        foreach (var semis in Joueur.StockSemis)
        {
            if (semis.NomPlante == semisChoisi.NomPlante)
            {
                semis.Quantite += 1;
                trouve = true;
                break;
            }
        }

        if (!trouve)
        {
            Joueur.StockSemis.Add(new Semis(
                semisChoisi.NomPlante,
                semisChoisi.PrixAchat,
                semisChoisi.EstProductionMultiple,
                1
            ));
        }

        Console.WriteLine($"‚úÖ Tu as achet√© : {semisChoisi.NomPlante}");
        Console.WriteLine("üì¶ Ton stock de semis contient :");
        foreach (var semis in Joueur.StockSemis)
        {
            Console.WriteLine($"- {semis.NomPlante} : {semis.Quantite} semis");
        }
    }


     // Permet au joueur d‚Äôacheter un outil
    public void AcheterOutils()
    {
        Console.WriteLine("\nQuels outils veux-tu acheter ?");
        Console.WriteLine("0. Annuler");

        for (int i = 0; i < OutilsDisponible.Count; i++)
        {
            var outil = OutilsDisponible[i];
            Console.WriteLine($"{i + 1}. {outil.NomOutil} ({outil.PrixAchat} pi√®ces)");
        }

        Console.Write("Entre le num√©ro de l'outil : ");
        if (!int.TryParse(Console.ReadLine(), out int index))
        {
            Console.WriteLine("‚ùå Entr√©e invalide.");
            return;
        }

        if (index == 0)
        {
            Console.WriteLine("‚úÖ Achat annul√©.");
            return;
        }

        if (index < 1 || index > OutilsDisponible.Count)
        {
            Console.WriteLine("‚ùå Num√©ro invalide.");
            return;
        }

        var outilChoisi = OutilsDisponible[index - 1];

        if (Joueur.Argent < outilChoisi.PrixAchat)
        {
            Console.WriteLine("‚ùå Tu n'as pas assez d'argent.");
            return;
        }

        Joueur.Argent -= outilChoisi.PrixAchat;

        // Ajoute l‚Äôoutil ou augmente la quantit√© si d√©j√† pr√©sent
        bool existeDeja = false;
        foreach (var outil in Joueur.StockOutils)
        {
            if (outil.NomOutil == outilChoisi.NomOutil)
            {
                outil.Quantite += 1;
                existeDeja = true;
                break;
            }
        }

        if (!existeDeja)
        {
            Joueur.StockOutils.Add(new Outils(outilChoisi.NomOutil, outilChoisi.PrixAchat, 1));
        }

        Console.WriteLine($"‚úÖ Tu as achet√© : {outilChoisi.NomOutil}");
        Console.WriteLine("üì¶ Ton stock d'outils contient :");
        foreach (var outil in Joueur.StockOutils)
        {
            Console.WriteLine($"- {outil.NomOutil} x{outil.Quantite}");
        }
    }
}